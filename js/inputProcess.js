//This is the main JS script to handle calls to both the Google Maps JavaScript API and Tomorrow.IO API.

//In order to use the require function on the browser side, the browserify package is used to create the bundle.js
//file, which contains the source code seen below as well as code generated by using the browserify package.
//Because of this, bundle.js is loaded into index.html, instead of this file.

"use strict";

//moment.js is used to send compatible date and time information to the Tomorrow.IO API.
const moment = require('moment');
//node-fetch is used to comunicate with the Tomorrow.IO API.
const fetch = require('node-fetch');
//query-string is used to organize the information needed to send to Tomorrow.IO API, including the key, location
//information, and others that can be found below.
const queryString = require('query-string'); 

// This is the URL to access the Tomorrow.IO API.
const getTimelineURL = "https://api.tomorrow.io/v4/timelines";

//This is the key used to access the Tomorrow.IO API.
const apikey = "";

// These are the fields retrieved from the Tomorrow.IO API and that will be displayed to the user.
const fields = [
    "precipitationIntensity",
    "precipitationType",
    "windSpeed",
    "windGust",
    "windDirection",
    "temperature",
    "temperatureApparent",
    "cloudCover",
    "cloudBase",
    "cloudCeiling",
    "weatherCode",
  ];

//This specifies the unit system used for this website.
const units = "imperial";

//These are the default timesteps for the weather.
const timesteps = ["5m", "1h", "1d"];

//This function takes in the weatherData gathered from Tomorrow.IO and pastes the information
//on the forms found on the webpage.
function displayWeatherData(weatherData)
{
    //The following are for the current time.
    document.getElementById("PI").innerHTML = "Precipitation Intensity: " + weatherData.data.timelines[0].intervals[0].values.precipitationIntensity;
    document.getElementById("PT").innerHTML = "Precipitation Type: " + weatherData.data.timelines[0].intervals[0].values.precipitationType;
    document.getElementById("WS").innerHTML = "Wind Speed: " + weatherData.data.timelines[0].intervals[0].values.windSpeed;
    document.getElementById("WG").innerHTML = "Wind Gust: " + weatherData.data.timelines[0].intervals[0].values.windGust;
    document.getElementById("WD").innerHTML = "Wind Direction: " + weatherData.data.timelines[0].intervals[0].values.windDirection;
    document.getElementById("T").innerHTML = "Temperature: " + weatherData.data.timelines[0].intervals[0].values.temperature;
    document.getElementById("TA").innerHTML = "Temperature Apparent: " + weatherData.data.timelines[0].intervals[0].values.temperatureApparent;
    document.getElementById("CC").innerHTML = "Cloud Cover: " + weatherData.data.timelines[0].intervals[0].values.cloudCover;
    document.getElementById("CB").innerHTML = "Cloud Base: " + weatherData.data.timelines[0].intervals[0].values.cloudBase;
    document.getElementById("CCe").innerHTML = "Cloud Ceiling: " + weatherData.data.timelines[0].intervals[0].values.cloudCeiling;
    document.getElementById("WC").innerHTML = "Weather Code: " + weatherData.data.timelines[0].intervals[0].values.weatherCode;

    //The following are for 1 hour.
    document.getElementById("PIH").innerHTML = "Precipitation Intensity: " + weatherData.data.timelines[1].intervals[0].values.precipitationIntensity;
    document.getElementById("PTH").innerHTML = "Precipitation Type: " + weatherData.data.timelines[1].intervals[0].values.precipitationType;
    document.getElementById("WSH").innerHTML = "Wind Speed: " + weatherData.data.timelines[1].intervals[0].values.windSpeed;
    document.getElementById("WGH").innerHTML = "Wind Gust: " + weatherData.data.timelines[1].intervals[0].values.windGust;
    document.getElementById("WDH").innerHTML = "Wind Direction: " + weatherData.data.timelines[1].intervals[0].values.windDirection;
    document.getElementById("TH").innerHTML = "Temperature: " + weatherData.data.timelines[1].intervals[0].values.temperature;
    document.getElementById("TAH").innerHTML = "Temperature Apparent: " + weatherData.data.timelines[1].intervals[0].values.temperatureApparent;
    document.getElementById("CCH").innerHTML = "Cloud Cover: " + weatherData.data.timelines[1].intervals[0].values.cloudCover;
    document.getElementById("CBH").innerHTML = "Cloud Base: " + weatherData.data.timelines[1].intervals[0].values.cloudBase;
    document.getElementById("CCeH").innerHTML = "Cloud Ceiling: " + weatherData.data.timelines[1].intervals[0].values.cloudCeiling;
    document.getElementById("WCH").innerHTML = "Weather Code: " + weatherData.data.timelines[1].intervals[0].values.weatherCode;

    //The following are for 1 day.
    document.getElementById("PID").innerHTML = "Precipitation Intensity: " + weatherData.data.timelines[2].intervals[0].values.precipitationIntensity;
    document.getElementById("PTD").innerHTML = "Precipitation Type: " + weatherData.data.timelines[2].intervals[0].values.precipitationType;
    document.getElementById("WSD").innerHTML = "Wind Speed: " + weatherData.data.timelines[2].intervals[0].values.windSpeed;
    document.getElementById("WGD").innerHTML = "Wind Gust: " + weatherData.data.timelines[2].intervals[0].values.windGust;
    document.getElementById("WDD").innerHTML = "Wind Direction: " + weatherData.data.timelines[2].intervals[0].values.windDirection;
    document.getElementById("TD").innerHTML = "Temperature: " + weatherData.data.timelines[2].intervals[0].values.temperature;
    document.getElementById("TAD").innerHTML = "Temperature Apparent: " + weatherData.data.timelines[2].intervals[0].values.temperatureApparent;
    document.getElementById("CCD").innerHTML = "Cloud Cover: " + weatherData.data.timelines[2].intervals[0].values.cloudCover;
    document.getElementById("CBD").innerHTML = "Cloud Base: " + weatherData.data.timelines[2].intervals[0].values.cloudBase;
    document.getElementById("CCeD").innerHTML = "Cloud Ceiling: " + weatherData.data.timelines[2].intervals[0].values.cloudCeiling;
    document.getElementById("WCD").innerHTML = "Weather Code: " + weatherData.data.timelines[2].intervals[0].values.weatherCode;
}

//This function gathers the necessary information to call Tomorrow.IO and makes the call with node-fetch.
//This function is heavily based off the following tutorial on Tomorrow.IO's website:
//https://docs.tomorrow.io/reference/get-timelines -Under the tab titled: Build Your Own Weather App With One Call
function weatherCall(location)
{
    //Call the moment.utc() function to get the valid time frames for the forecast.
    const now = moment.utc();
    const startTime = moment.utc(now).add(0, "minutes").toISOString();
    const endTime = moment.utc(now).add(2, "days").toISOString();
    
    // Use this as the timezone for the times given.
    const timezone = "America/Chicago";
    
    // Gather all the information necessary to send to Tomorrow.IO and turn it into a string.
    const getTimelineParameters =  queryString.stringify({
    apikey,
    location,
    fields,
    units,
    timesteps,
    startTime,
    endTime,
    timezone,
    }, {arrayFormat: "comma"});
                    
    var weatherData;

    // Use node-fetch to communicate with Tomorrow.IO, storing the results into weatherData and then calling
    // displayWeatherData() to display the information on the webpage.
    fetch(getTimelineURL + "?" + getTimelineParameters, {method: "GET"})
    .then((result) => result.json())
    .then(data => weatherData = data)
    .then(weatherData => displayWeatherData(weatherData))
    .catch((error) => console.error("error: " + error));

}

//This function uses the Google Maps JavaScript API to convert the user's input into longitude and latitude.
function retrieveLocation(address)
{
    //Create a Geocoder object and call the geocode function with the given address.
    //If the status is okay, send the longitude and latitude to weatherCall() to use it in Tomorrow.IO.
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({'address': address}, function(results, status) {
        if (status == 'OK') {
            var myResult = results[0].geometry.location; // reference LatLng value
            let location = [myResult.lat(), myResult.lng()];
            weatherCall(location);
        }
        else {
        alert('Map location not found.  Please adjust address.  Error: '+ status);
        }
    });
}

//This function takes the users' input and ensures the format is correct before sending it to the
//Google Maps JavaScript API.
function acceptInput()
{
    //Create two FormData objects to gather the city and state names from the user.
    var city = new FormData();
    city.append("city", document.getElementById("cityName").value);
    
    var state = new FormData();
    state.append("state", document.getElementById("stateName").value);
    
    //Ensure first that neither the city or state names are empty (or only whitespace).
    //If it is valid, then send the correct address to retrieveLocation().
    if(city.get("city").trim() != "" && state.get("state").trim() != "")
    {
        let address = city.get("city").trim() + ", " + state.get("state").trim();
        retrieveLocation(address);
    }
    else
        alert("Invalid Input!");
}

//Call the acceptInput() function whenever the user clicks the submit button on the form.
let form = document.getElementById("weatherInfo");

form.addEventListener("submit", function(event){
        acceptInput();
});